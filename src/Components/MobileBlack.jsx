/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 BLACK.glb --transform
*/

import React, { useRef, useEffect, useState } from "react";
import { Html, useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { useControls } from "leva";
import { gsap } from "gsap";
import useColorStore from "../Store/ColorStore";
import useAnimationStore from "../Store/AnimationState";
const colorArray = [
  {
    name: "Blue",
    hex: "#2596be",
    imageUrl: "/assets/color_1.png",
  },
  {
    name: "Black",
    hex: "#191a1c",
    imageUrl: "/assets/color_2.png",
  },
  {
    name: "Gray",
    hex: "#848589",
    imageUrl: "/assets/color_3.png",
  },
];

export function MobileBlack(props) {
  const { nodes, materials } = useGLTF("/BLACK-transformed.glb");
  const activeState = useAnimationStore((state) => state.activeState);
  const [firstRender, setFirstRender] = useState(true);
  const [color, setColor] = useState("#2596be");
  const groupRef = useRef();

  const { rotation, position } = useControls({
    rotation: {
      value: [0,0,0],
      step: 0.01,
    },
    position: {
      value: [0, -1.5, -0],
      step: 0.01,
    },
  });

  useEffect(() => {
    // Animation timeline using gsap
    const timeline = gsap.timeline();

    // Set initial position
    groupRef.current.position.set(0, -1.5, -5);

    // Initial spinning animation with movement
    timeline.to(groupRef.current.position, {
      z: 0,
      duration: 2,
      ease: "power1.inOut",
      onUpdate: () => {
        groupRef.current.rotation.y += 0.1;
      },
    });

    timeline.to({}, { duration: 1 });
  }, []);

  //on activeState 2
  useEffect(() => {
    if (activeState === 2) {
      gsap.to(groupRef.current.position, {
        x: -0.659,
        y: -3,
        z: -3.22,
        duration: 1,
        onStart: () => {
          gsap.to(groupRef.current.rotation, {
            x: 0,
            y: -0.64,
            z: 0,
            duration: 1,
          });
        },
      });
    } else if (activeState === 0) {
      gsap.to(groupRef.current.position, {
        x: 0,
        y: -1.5,
        z: 0,
        duration: 1,
      });
    }
  }, [activeState]);


  useEffect(() => {
    if (activeState === 3) {
      gsap.to(groupRef.current.position, {
        x: -0.35,
        y: -0.69,
        z: -3.41,
        duration: 1,
        onStart: () => {
          gsap.to(groupRef.current.rotation, {
            x: -1.91,
            y: -0.52,
            z: 3.94,
            duration: 1,
          });
        },
      });
    } else if (activeState === 0) {
      gsap.to(groupRef.current.position, {
        x: 0,
        y: -1.5,
        z: 0,
        duration: 1,
        onStart: () => {
          gsap.to(groupRef.current.rotation, {
            x: 0,
            y: 0,
            z: 0,
            duration: 1,
            delay: 0.5,
          });
        },
      });
    }
  }, [activeState]);

  useFrame(() => {
    if (activeState === 0) groupRef.current.rotation.y += 0.005;
  });

  return (
    <group>
      {activeState === 1 && (
        <Html position={[0, 0, 0]}>
          <div className='color-container' style={{ border: "1px solid red" }}>
            <span className='color-header'>
              {colorArray.filter((item) => item.hex === color)[0].name}
            </span>

            <img
              src='/assets/color_1.png'
              onClick={() => setColor("#2596be")}
              className={`color-div ${
                color === "#2596be" && "color-div-selected"
              } `}
            />
            <img
              src='/assets/color_2.png'
              onClick={() => setColor("#191a1c")}
              className={`color-div ${
                color === "#191a1c" && "color-div-selected"
              } `}
            />
            <img
              src='/assets/color_3.png'
              onClick={() => setColor("#848589")}
              className={`color-div ${
                color === "#848589" && "color-div-selected"
              } `}
            />
          </div>
        </Html>
      )}
      <group
        ref={groupRef}
        scale={24}
        position={position}
        rotation={rotation}
        {...props}
        dispose={null}
      >
        <group
          position={[-0.002, 0.124, -0.002]}
          rotation={[3.086, 0.009, 0.022]}
          scale={[1, 1, 1.006]}
        >
          <mesh
            geometry={nodes["02-FLASH-LENS_M16U001_1"].geometry}
            material={materials["Level 25.001"]}
          />
          <mesh
            geometry={nodes["02-FLASH-LENS_M16U001_2"].geometry}
            material={materials.FLASH}
          />
        </group>
        <mesh
          geometry={nodes["02_CAM_DECO_LENS6_GLASS_M2_1"].geometry}
          material={materials["CAM GLASS"]}
          position={[0.006, 0.135, -0.004]}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <mesh
          geometry={nodes["02_CAM_DECO_SCREW_LV_OUT_M2_body1"].geometry}
          material={materials["PHONE BACK BLACK M16U"]}
          position={[0.008, 0.135, -0.003]}
          rotation={[Math.PI / 2, 0, 0]}
          material-color={color}
        />
        <mesh
          geometry={nodes["02_METAL_MID_HSG_0902_M2_1_1_1"].geometry}
          material={materials["PHONE SIDE BLACK M16U"]}
          position={[-0.004, 0.161, 0.004]}
          rotation={[Math.PI / 2, 0, 0]}
          material-color={color}
        />
        {/* <mesh
        geometry={nodes["03_80018A1_01_NEW_MAX"].geometry}
        material={materials.lens}
        position={[0.016, 0.127, 0.001]}
        rotation={[-0.508, 1.569, -0.47]}
        scale={1.012}
      /> */}
        <mesh
          geometry={nodes["03_80018A1_01_NEW_MAX001"].geometry}
          material={materials["Material.009"]}
          position={[0.016, 0.127, 0.001]}
          rotation={[0.1, 1.55, -1.67]}
          scale={1.012}
        />
        <group position={[0.006, 0.137, -0.004]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            geometry={nodes.Mesh2118.geometry}
            material={materials["Material.006"]}
          />
          <mesh
            geometry={nodes.Mesh2118_1.geometry}
            material={materials["Material.007"]}
          />
        </group>
        <mesh
          geometry={nodes["04_LOGO_PU_GF_TOP_M2_body1"].geometry}
          material={materials.LOG}
          position={[0.019, 0.028, 0]}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <mesh
          geometry={nodes["50406A1_REVIEW_H_1_1"].geometry}
          material={materials["Material.003"]}
          position={[-0.004, 0.156, 0.006]}
          rotation={[-0.368, -1.57, -1.829]}
        />
        <mesh
          geometry={nodes.Curve.geometry}
          material={materials["Material.013"]}
          position={[-0.003, 0.127, -0.004]}
          rotation={[1.571, 0, Math.PI]}
        />
        <mesh
          geometry={nodes.M2_AMB673ZX02_CG_35_body1.geometry}
          material={materials["SCREEN.001"]}
          position={[-0.004, 0.091, 0.008]}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <mesh
          geometry={nodes.POL_11_1.geometry}
          material={materials["Material.001"]}
          position={[-0.004, 0.117, 0.007]}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <mesh
          geometry={nodes.SENSOR_L_P_C_AMS_TCS3408_body1001.geometry}
          material={materials["Material.012"]}
          position={[-0.003, 0.137, -0.003]}
          rotation={[0.368, -1.57, 1.668]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/BLACK-transformed.glb");
